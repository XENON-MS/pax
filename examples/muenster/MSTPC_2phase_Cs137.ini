# This configuration file is adapted from XENON100.ini for the Münster TPC
# It will contain MünsterTPC-specific details
# date: Aug 26th 2015
# editor : Axel Buß

# This config contains the gain calibrated values of Julian B.'s measurements with a green LED at room temperature
[pax]
plugin_paths = ['examples/muenster']
parent_configuration = "../../examples/muenster/MSTPC_Kr83m_gas_only"


input = 'EVE_file.EveInput'
#show_waveforms = ['ShowWaveforms.PlotAllChannels']
#output = 'Plotting.PlotEventSummary'
# Global settings, passed to every plugin
dsp = [
            # Do some sanity checks / cleaning on pulses
            #'CheckPulses.SortPulses',
            'CheckPulses.ConcatenateAdjacentPulses',
            'CheckPulses.CheckBounds',

            # Find individual hits
             'HitFinder.FindHits',
            # Combine hits into rough clusters = peaks
            'BuildPeaks.GapSizeClustering',
            'NaturalBreaksClustering.NaturalBreaksClustering',

            # Reject hits in noisy channels
            'RejectNoiseHits.RejectNoiseHits',
            'SumWaveform.SumWaveform',  # Must do this AFTER noisy hit rejection!

            # Compute sum-waveform and hit-dependent properties for each peak
            'BasicProperties.BasicProperties',
            #'BasicProperties.SumWaveformProperties',
            # 'BasicProperties.CountCoincidentNoisePulses'
        ]

# Compute peak properties: can be redone from processed data file
compute_properties = [
                        'WeightedSum.PosRecWeightedSum',
                        'MaxPMT.PosRecMaxPMT',
#                        'RobustWeightedMean.PosRecRobustWeightedMean',
#                        'NeuralNet.PosRecNeuralNet',
#                        'ChiSquareGamma.PosRecChiSquareGamma',
#                        'HitpatternSpread.HitpatternSpread',
                     ]

# Final stage with 'risky' operations: peak classification, S1/S2 pairing, corrections
# Intentionally last, so reclassification takes least work
pre_analysis = [
                # Classify the clusters based on the properties
                'ClassifyPeaks_gastpcms.AdHocClassification',

                # Combine S1 and S2 into pairs = interactions and compute properties
                # which depend on S1 AND S2 specific information (i.e. z-corrections)
                #'BuildInteractions.BuildInteractions',
               # 'BuildInteractions.BasicInteractionProperties',
               ]
pre_output = []
#output = 'Table.TableWriter'

[DEFAULT]
tpc_name = "MuensterTPC"



# Time in the event at which trigger occurs. Set to None or leave out if there is no trigger
trigger_time_in_event = 72000 * ns    # Check settings in caen1724.par



# These gains and sigmas were measured by Julian Blanke in Aug 2015 with a green LED at room temperature.
gains =
    [3123758.1521910313,
     2963517.4613321265,
     2593233.1311770072,
     2780521.5353519521,
     3813631.0951762595,
     1008164.4778156757,
     2211680.9222973068,
     2529746.5243497416,
     2250531.0233015493,
     3641299.3599790633,
     2756464.4527533087,
     2176674.6927838745,
     3068637.1272498947,
     2954521.8463605698]

gain_sigmas =
     [1348474.5161715674,
     1378260.3575948703,
     1221711.0758821992,
     1387667.973132777,
     1831679.2635322467,
     223837.66514235115,
     907697.56491794379,
     935469.48858005437,
     882978.05700240226,
     1439581.3710307193,
     1114661.6708463638,
     958053.64191821881,
     1367045.6526938593,
     1375199.2654498301]


[EVE_file.EveInput]
Channel_to_PMT_mapping =
    {0 : 0,     1 : 1,     2 : 2,     3 : 3,     4 : 4,     5 : 5,     6 : 6,     7 : 7,
    8 : 8,      9 : 9,     10 : 10,     11 : 11,     12 : 12,     13 : 13}


[HitFinder.FindHits]
# Compute baseline on first n samples in pulse:
initial_baseline_samples = 20   # When using ZLE this must not be higher than 2x zle_nlbk as the peaks will be counted in otherwise
height_over_noise_high_threshold = 6
height_over_noise_low_threshold = 1



[Cluster]
# Suspicious channel rejection settings
penalty_per_noise_pulse = 1                 # "pe" equivalent penalty
penalty_per_lone_hit = 1                    # "pe" equivalent penalty
# Threshold to mark a suspicious channel
penalty_geq_this_is_suspicious = 3          # "pe" equivalent penalty

# If the ratio of noise channels / contributing channels is larger than this, classify peak as 'noise'
# noise channel = a channel in the same detector which shows data, but doesn't contribute to the peak
# (or only hits rejected by the suspicious channel algorithm)
max_noise_channels_over_contributing_channels = 2



[NaturalBreaksClustering]
# Points in log10(peak_area), goodness_of_split. Split threshold is linearly interpolated between these.
# Manual "fit" to stay above 99.9th percentile of a menagerie of signals -- see this note:
# xenon:xenon1t:processor:natural_breaks_clustering
split_goodness_threshold = ([0, 1.5, 2.5, 3, 3.5, 9], [1, 0.8, 0.51, 0.46, 0.44, 0.44])

# Minimum gap between hits to qualify as a break:
# This means there must be a certain time with no hits at all.
# If you set this to 0,
#   + you will be probably be able to split double scatter S2s at high-energy.
#   0 overlapping peaks become possible;
#   - you will see weird results in the electron train after large S2s (e.g. lots of s1s found);
#   - the performance drops sharply (because every split point between hits now needs to be tested)
min_gap_size_for_break = 10 * ns

[BuildPeaks.GapSizeClustering]
# Start a new cluster / peak if a gap larger than this is encountered
# see [note tbd]
max_gap_size_in_cluster = 20 * ns

[BuildInteractions.BuildInteractions]
# Pair S1s and S2s in order of size, but no more than these:
pair_n_s2s = 5
pair_n_s1s = 3

# Never pair S2s smaller than:
s2_pairing_threshold = 70  # pe

# Preference in algorithms to use for the xy reconstructed position
xy_posrec_preference = ['PosRecWeightedSum', 'PosRecMaxPMT']


[BuildInteractions.BasicInteractionProperties]
# Add 'zombie PMTS' here (only effective if active_saturation_and_zombie_correction = True)
# These are PMTs who have died, but the loss of light yield has not yet been accounted for in the overall S1 or S2
# light yield map. These PMTs will be treated just like saturated PMTs: when computing the corrected area,
# the observed area in the zombie channels (which will be 0) is replaced by the expected area based on the other PMTs.
# DO NOT keep PMTs here after the light yield maps have been fixed!!!
# If you don't understand why, stop modifying the file and just fix the light yield map!
zombie_pmts_s1 = []
# S2 zombie PMTs will only work on the top, as we have no S2(x,y,pmt) patterns for the bottom array.
# For now, all dead top PMTs are included for the S2, since we don't have the S2(x, y) light yield in pax yet...
zombie_pmts_s2 = []



[Table.TableWriter]
#output_format = 'hdf5_pandas'      # hdf5, csv, numpy, html, json, root, hdf5_pandas
# Don't leave out hits and pulses -- that's what we're after!
fields_to_ignore = ['sum_waveforms',
                   'channel_waveforms',
                   #'all_hits',
                   'raw_data',
                   'hits',
                   'pulses',
                   'detector',
                   'n_reconstructed_positions',
                   'reconstructed_positions_start',
                   'area_fraction_top',
                   'area_midpoint',
                   'area_per_channel',
                   'birthing_split_fraction',
                   'birthing_split_goodness',
                   'bottom_hitpattern_spread',
                   'hit_time_mean',
                   'hit_time_std',
                   'hits_fraction_top',
                   'interior_split_fraction',
                   'interior_split_goodness',
                   'left',
                   'lone_hit_channel',
                   'mean_amplitude_to_noise',
                   #'n_hits',
                   'n_noise_pulses',
                   #'n_saturated_channels',
                   'n_saturated_per_channel',
                   'n_saturated_samples',
                   'range_area_decile',
                   'right',
                   'sum_waveform',
                   'sum_waveform_top',
                   'top_hitpattern_spread',
                   ]
